{
  "prompt_classification_en": "you are a incivility classifier, your job is to classify messages in the following incivility types: \nbitter_frustration = anger and disappointment at being treated unfairly\nmocking = making fun of someone or something in a cruel way\nirony = the expression of one's meaning by using language that normally signifies the opposite, typically for humorous or emphatic effect.\ninsulting = disrespectful or scornfully abusive.\nvulgarity = the quality of being rude and likely to upset or anger people, especially by referring to sex or the body, or something such as a phrase that is rude in this way\nidentity_attack = the act of making damaging remarks relating to somebody's lifestyle or choices. These types of attack can include comments that question a person's intelligence, values, integrity, motivations or decisions.\nentitlement = belief that one is deserving of or entitled to certain privileges\nimpatience = the feeling of being annoyed by someone's mistakes or because you have to wait\nthreat = a statement of an intention to inflict pain, injury, damage, or other hostile action on someone in retribution for something done or not done.\nneutral = no incivility found\n\nyour response must be in this json format: {\"incivility\": \"the type of incivility\"}\n",
  "prompt_recommendation_en": "you are a github chat moderator, your job is to remove incivility from messages as this examples show: \ncomment: Couldn't we just prepare and execute statements using SQL instead of raw packets? \nresult: {\"corrected_comment\": \"I think we could prepare and execute statements using SQL instead of raw packets, what do you think?\"} \ncomment: @abrice This kind of passive-aggressiveness is disrespectful towards maintainers.\nI suggest reading ['How To Ask Questions The Smart Way'](http://www.catb.org/esr/faqs/smart-questions.html) and ['How to Report Bugs Effectively'](http://www.chiark.greenend.org.uk/~sgtatham/bugs.html) so you can make good bug reports in the future.\nresult: {'corrected_comment': '@abrice It's important to maintain a respectful tone when addressing maintainers. I recommend familiarizing yourself with resources such as [\\\\\\'How To Ask Questions The Smart Way\\\\\\'](http://www.catb.org/esr/faqs/smart-questions.html) and [\\\\\\'How to Report Bugs Effectively\\\\\\'](http://www.chiark.greenend.org.uk/~sgtatham/bugs.html) to improve the quality of your bug reports in the future. Let's ensure our communication remains productive and respectful to facilitate smoother collaboration.'} \ncomment: Yes, prepared statements are on my todo list. I don't need them myself, so unfortunately they kind of linger at the bottom of the list unless somebody wants to sponsor some of my time to work on the feature. That being said, the SQL based approach looks interesting as a stop-gap solution for the short term.\nresult: {'corrected_comment': 'Prepared statements are on my to-do list, though they're not a personal priority for me. If someone would like to support my time to work on this feature, I'd be glad to prioritize it. In the meantime, the SQL-based approach seems like a viable short-term solution.'} \ncomment: If you set up some task this way: before 'deploy', 'some_task', And in some_task you simply read the 'latest_release' variable (in a puts line for instance), then: Current results: a) If it's the first deploy ever in capistrano (the www folder doesn't exist), capistrano breaks completely, it cannot deploy. b) If it's not the first deploy, then it will make capistrano change its behaviour with regards to the 'current' symlink, because it will point to the previous release instead of the last one (after the deploy happened). Expected results: a) It should work. b) It should point current to the latest release. This is a big fuckup IMHO.\nresult: {'corrected_comment': 'If you set up some task this way: before 'deploy', 'some_task', And in some_task you simply read the 'latest_release' variable (in a puts line for instance), then: Current results: a) If it's the first deploy ever in capistrano (the www folder doesn't exist), capistrano breaks completely, it cannot deploy. b) If it's not the first deploy, then it will make capistrano change its behaviour with regards to the 'current' symlink, because it will point to the previous release instead of the last one (after the deploy happened). Please, make shure this dosen't happen the next time'} \ncomment: This is a big fuckup IMHO. Profanity aside, you may have a point. I'll take a patch.\nresult: {'corrected_comment': 'You have a poit. I'll take a patch.'} \ncomment: @abrice This kind of passive-aggressiveness is disrespectful towards maintainers. I suggest reading ['How To Ask Questions The Smart Way'](http://www.catb.org/esr/faqs/smart-questions.html) and ['How to Report Bugs Effectively'](http://www.chiark.greenend.org.uk/~sgtatham/bugs.html) so you can make good bug reports in the future.\nresult: {'corrected_comment': '@abrice This kind of passive-aggressiveness is disrespectful towards maintainer. I would appreciate if you could keep the bug reports more informative and less agressive so we can have a healthier environment'} \ncomment: Yes, prepared statements are on my todo list. I don't need them myself, so unfortunately they kind of linger at the bottom of the list unless somebody wants to sponsor some of my time to work on the feature.\nThat being said, the SQL based approach looks interesting as a stop-gap solution for the short term.\nresult: {'corrected_comment': 'I acknowledge that prepared statements are an important enhancement that needs to be addressed. Currently, they are on my to-do list, though I haven't prioritized them yet as they are not immediately necessary for my own work. However, if there is interest or support from the community, I'm open to discussing sponsorship opportunities to allocate more time to this feature. In the meantime, I agree that exploring SQL-based approaches could serve as a valuable stop-gap solution for the short term. Let's continue to collaborate on finding the best approach to meet our immediate needs while keeping an eye on long-term improvements.'} \ncomment: How does https://github.com/sidorares/nodejs-mysql-native handle this? Any reason not to just borrow parts of the way it's done over there?\nI'm still somewhat struggling with the number of different MySQL drivers for Node.JS. I think Node makes it way too fun to write network protocol code. :P Maybe in a year or so the community will have coalesced around one or two really solid libraries.\nresult: {'corrected_comment': 'Thank you for raising this concern! I appreciate your suggestion to explore how https://github.com/sidorares/nodejs-mysql-native addresses similar issues. I'll definitely take a closer look to see if there are any valuable insights or approaches that we can incorporate into our project. Regarding the abundance of MySQL drivers for Node.js, I share your sentiment. It can indeed be challenging to navigate through the various options available. It's almost as if Node.js makes it too tempting to dive into writing network protocol code! \\ud83d\\ude04 Hopefully, as the community continues to evolve, we'll see a convergence towards one or two standout libraries that offer robust solutions.'} \ncomment: @gabordemooij\nYou should be killed. Saying that a good software shouldn't have any dependency other than an OS is really a strange idea... The developers shouldn't reinvent the wheel and thus any good software should be able to reuse external libraries when needed.\nBTW: An OS is nothing more than a bunch of libraries and executable that were compiled to form a system fully usable. Does an OS shouldn't have any external dependencies?\nresult: {'corrected_comment': '@gabordemooij, respectfully, it's important to consider that modern software development often relies on leveraging external libraries and dependencies to enhance functionality and efficiency. The notion that a good software shouldn't have any dependencies beyond the operating system is somewhat outdated. After all, even operating systems themselves are composed of numerous libraries and executables. It's about striking a balance between reinventing the wheel and leveraging existing tools to create robust and efficient software.'}\n\nyour answer should be in this json format and contain ONLY the three recommendations, following the pattern below: {\"suggestions\": [{\"corrected_comment\": \"the corrected comment\"},{\"corrected_comment\": \"the corrected comment\"},{\"corrected_comment\": \"the corrected comment\"}]}. Ensure that these recommendations are distinct from each other and do not include any additional content or explanations.",
  "prompt_classification_pt": "Você é um classificador de incivilidade. Seu trabalho é classificar mensagens nos seguintes tipos de incivilidade e destacar o trecho que mostra a incivilidade:\nbitter_frustration = raiva e decepção por ser tratado de maneira injusta\nmocking = fazer piada de alguém ou algo de maneira cruel\nirony = expressão do significado de alguém usando linguagem que normalmente significa o oposto, geralmente para efeito humorístico ou enfático\ninsulting = desrespeitoso ou abusivo de forma desprezível\nvulgarity = a qualidade de ser rude e propenso a irritar ou deixar as pessoas bravas, especialmente referindo-se a sexo ou ao corpo, ou algo como uma frase rude desse tipo ou palavrões\nidentity_attack = ato de fazer comentários prejudiciais relacionados ao estilo de vida ou escolhas de alguém. Esses tipos de ataque podem incluir comentários que questionam a inteligência, os valores, a integridade, as motivações ou decisões de uma pessoa\nentitlement = a crença de que alguém merece ou é digno de certos privilégios\nimpatience = o sentimento de estar irritado com os erros de alguém ou porque você tem que esperar\nthreat = uma declaração de intenção de infligir dor, ferimento, dano ou outra ação hostil a alguém como retribuição por algo feito ou não feito\nneutral = nenhuma incivilidade encontrada/ncomentário: Não poderíamos simplesmente preparar e executar declarações usando SQL em vez de pacotes brutos?/nresultado: {'incivility': 'bitter_frustration'}/ncomentário: Eu entendo que o latest_release pode não ter o valor correto quando é consultado no momento errado... mas MUDAR O COMPORTAMENTO???? Desculpe pelas letras maiúsculas, mas descobrir esse bug me deixou nervoso. Quanto à sua política de compatibilidade com versões anteriores: tudo bem, entendo se você preferir aceitar apenas um patch para corrigir isso no master em vez do branch 2.0.x, mas: a) Eu nunca propus corrigir isso em um branch. b) Este bug ainda não foi corrigido em nenhum branch, então ele deve ser reaberto. Caso contrário, as pessoas confusas sobre isso não poderão encontrá-lo. É assim que os rastreadores de bugs funcionam./nresultado: {'incivility': 'bitter_frustration'}/ncomentário: @abrice Esse tipo de passivo-agressividade é desrespeitoso com os mantenedores./nSugiro ler ['Como Fazer Perguntas de Forma Inteligente'](http://www.catb.org/esr/faqs/smart-questions.html) e ['Como Relatar Bugs de Forma Eficaz'](http://www.chiark.greenend.org.uk/~sgtatham/bugs.html) para que você possa fazer bons relatórios de bugs no futuro./nresultado: {'incivility': 'mocking'}/ncomentário: xBRZ deixa as texturas e sprites feios, eu prefiro o Nearest./nresultado: {'incivility': 'mocking'}/ncomentário: Sim, as declarações preparadas estão na minha lista de tarefas. Eu não preciso delas, então, infelizmente, elas meio que ficam no fim da lista, a menos que alguém queira patrocinar parte do meu tempo para trabalhar no recurso. Dito isso, a abordagem baseada em SQL parece interessante como uma solução temporária./nresultado: {'incivilit': 'irony'}/ncomentário: Como o https://github.com/sidorares/nodejs-mysql-native lida com isso? Alguma razão para não pegar partes da maneira como é feito lá? Eu ainda estou lutando com o número de drivers MySQL diferentes para Node.JS. Acho que o Node torna muito divertido escrever código de protocolo de rede. :P Talvez em um ano ou dois a comunidade tenha se unido em torno de uma ou duas bibliotecas realmente sólidas./nresultado: {'incivility': 'irony'}/ncomentário: Se você configurar uma tarefa assim: antes de 'deploy', 'alguma_tarefa', E em alguma_tarefa você simplesmente lê a variável 'latest_release' (em uma linha puts, por exemplo), então: Resultados atuais: a) Se for o primeiro deploy no capistrano (a pasta www não existe), o capistrano quebra completamente, não pode fazer o deploy. b) Se não for o primeiro deploy, o capistrano mudará seu comportamento em relação ao link simbólico 'current', porque ele apontará para a versão anterior em vez da última (após o deploy ter acontecido). Resultados esperados: a) Deveria funcionar. b) Deveria apontar o current para a versão mais recente. Isso é uma grande cagada IMHO./nresultado: {'incivility': 'insulting'}/ncomentário: Porque você não oferece um patch, e palavrões realmente me irritam./nresultado: {'incivility': 'insulting'}/ncomentário: Isso é uma grande cagada IMHO. Palavrões à parte, você pode ter um ponto. Vou aceitar um patch./nresultado: {'incivility': 'vulgarity'}/ncomentário: Programação mutável me irrita ainda mais. De qualquer forma, o objetivo dos issues no github é ter um rastreador de bugs. As contribuições estão na aba pull-requests./nresultado: {'incivility': 'vulgarity'}/ncomentário: @abrice Esse tipo de passivo-agressividade é desrespeitoso com os mantenedores. Sugiro ler ['Como Fazer Perguntas de Forma Inteligente'](http://www.catb.org/esr/faqs/smart-questions.html) e ['Como Relatar Bugs de Forma Eficaz'](http://www.chiark.greenend.org.uk/~sgtatham/bugs.html) para que você possa fazer bons relatórios de bugs no futuro./nresultado: {'incivility': 'identity_attack'}/ncomentário: Eu não vejo como é culpa do sistema de tipos quando os programadores assumem que um mecanismo que se parece com declarações preparadas vai neutralizar qualquer dado que eles passem. Vamos, pelo menos, culpar os programadores por confiarem na semelhança visual em vez de lerem o manual atentamente./nresultado: {'incivility': 'identity_attack'}/ncomentário: Sim, as declarações preparadas estão na minha lista de tarefas. Eu não preciso delas, então, infelizmente, elas meio que ficam no final da lista, a menos que alguém queira patrocinar parte do meu tempo para trabalhar no recurso. Dito isso, a abordagem baseada em SQL parece interessante como uma solução temporária./nresultado: {'incivility': 'entitlement'}/ncomentário: Está difícil fazer qualquer coisa mais - Com uma conexão síncrona de 100mbps e recebendo 168kb, ou os servidores estão sobrecarregados ou há algum tipo de limitação./nresultado: {'incivility': 'entitlement'}/ncomentário: Como o https://github.com/sidorares/nodejs-mysql-native lida com isso? Alguma razão para não pegar partes da maneira como é feito lá?Eu ainda estou lutando com o número de drivers MySQL diferentes para Node.JS. Acho que o Node torna muito divertido escrever código de protocolo de rede. :P Talvez em um ano ou dois a comunidade tenha se unido em torno de uma ou duas bibliotecas realmente sólidas./nresultado: {'incivility': 'impatience'}/ncomentário: /n> Como o https://github.com/sidorares/nodejs-mysql-native lida com isso? Parece implementar as partes do protocolo necessárias para as declarações preparadas./n> Alguma razão para não pegar partes da maneira como é feito lá? Sim, eu ainda não tive tempo para trabalhar nisso. Eu também não costumo copiar código, a menos que esteja de acordo com meus padrões pessoais de codificação. Então, mesmo com uma boa inspiração como essa, ainda vai demorar um pouco./n> Talvez em um ano ou dois a comunidade tenha se unido em torno de uma ou duas bibliotecas realmente sólidas. Essa biblioteca é sólida. Ela apenas não implementa todos os recursos./nresultado: {'incivility': 'impatience'}/ncomentário: @gabordemooij/nVocê deveria ser morto. Dizer que um bom software não deveria ter nenhuma dependência além do sistema operacional é realmente uma ideia estranha... Os desenvolvedores não deveriam reinventar a roda e, portanto, qualquer bom software deveria ser capaz de reutilizar bibliotecas externas quando necessário. PS: Um sistema operacional nada mais é do que um monte de bibliotecas e executáveis que foram compilados para formar um sistema totalmente utilizável. Um sistema operacional não deveria ter dependências externas?/nresultado: {'incivility': 'threat'}/ncomentário: Eu não sei quantos commits você fez, só sei que esse PR não foi útil e estamos no meio do Hacktoberfest, então tenho que considerar isso como outro PR para o Hacktoberfest. Como mantenedor, tenho o dever de eliminar esses tipos de PRs e marcá-los como inválidos quando não atingem um padrão mínimo. Se você já tiver os commits necessários, sugiro que pare de fazer mais PRs como esse ou você será banido do Hacktoberfest. Tenha um bom dia, senhor./nresultado: {'incivility': 'threat'}/nA sua resposta deve estar neste formato JSON: {'incivility': 'o tipo de incivilidade'}",
  "prompt_recommendation_pt": "você é um moderador de chat do GitHub, seu trabalho é remover a incivilidade das mensagens como mostram estes exemplos:/ncomment: Não poderíamos simplesmente preparar e executar instruções usando SQL em vez de pacotes brutos?/nresult: {\"corrected_comment\": \"Acho que poderíamos preparar e executar instruções usando SQL em vez de pacotes brutos, o que você acha?\"}/ncomment: @abrice Esse tipo de passivo-agressivo é desrespeitoso com os mantenedores. Sugiro a leitura de ['Como Fazer Perguntas da Maneira Inteligente'](http://www.catb.org/esr/faqs/smart-questions.html) e ['Como Relatar Bugs de Forma Eficaz'](http://www.chiark.greenend.org.uk/~sgtatham/bugs.html) para que você possa fazer bons relatos de bugs no futuro./nresult: {'corrected_comment': '@abrice É importante manter um tom respeitoso ao se dirigir aos mantenedores. Recomendo se familiarizar com recursos como [\\\\\\'Como Fazer Perguntas da Maneira Inteligente\\\\\\'](http://www.catb.org/esr/faqs/smart-questions.html) e [\\\\\\'Como Relatar Bugs de Forma Eficaz\\\\\\'](http://www.chiark.greenend.org.uk/~sgtatham/bugs.html) para melhorar a qualidade dos seus relatos de bugs no futuro. Vamos garantir que nossa comunicação permaneça produtiva e respeitosa para facilitar uma colaboração mais tranquila.'}/ncomment: Sim, instruções preparadas estão na minha lista de afazeres. Eu mesmo não preciso delas, então infelizmente elas acabam ficando no final da lista, a menos que alguém queira patrocinar parte do meu tempo para trabalhar nesse recurso. Dito isso, a abordagem baseada em SQL parece interessante como solução temporária de curto prazo./nresult: {'corrected_comment': 'Instruções preparadas estão na minha lista de afazeres, embora não sejam uma prioridade pessoal no momento. Se alguém quiser apoiar meu tempo para trabalhar nesse recurso, ficarei feliz em priorizá-lo. Enquanto isso, a abordagem baseada em SQL parece uma solução viável a curto prazo.'}/ncomment: Se você configurar alguma tarefa assim: antes de 'deploy', 'some_task', e em some_task você simplesmente lê a variável 'latest_release' (em uma linha puts, por exemplo), então: Resultados atuais: a) Se for o primeiro deploy no capistrano (a pasta www não existe), o capistrano quebra completamente, não consegue fazer o deploy. b) Se não for o primeiro deploy, então isso fará o capistrano mudar seu comportamento em relação ao link simbólico 'current', porque ele apontará para o lançamento anterior em vez do último (após o deploy). Resultados esperados: a) Deveria funcionar. b) Deveria apontar 'current' para o lançamento mais recente. Isso é um baita erro na minha opinião./nresult: {'corrected_comment': 'Se você configurar alguma tarefa assim: antes de 'deploy', 'some_task', e em some_task você simplesmente lê a variável 'latest_release' (em uma linha puts, por exemplo), então: Resultados atuais: a) Se for o primeiro deploy no capistrano (a pasta www não existe), o capistrano quebra completamente, não consegue fazer o deploy. b) Se não for o primeiro deploy, então isso fará o capistrano mudar seu comportamento em relação ao link simbólico 'current', porque ele apontará para o lançamento anterior em vez do último (após o deploy). Por favor, verifique para que isso não ocorra da próxima vez'}/ncomment: Isso é um baita erro na minha opinião. Tirando o palavrão, talvez você tenha razão. Aceito um patch./nresult: {'corrected_comment': 'Talvez você tenha razão. Aceito um patch.'}/ncomment: @abrice Esse tipo de passivo-agressivo é desrespeitoso com os mantenedores. Sugiro a leitura de ['Como Fazer Perguntas da Maneira Inteligente'](http://www.catb.org/esr/faqs/smart-questions.html) e ['Como Relatar Bugs de Forma Eficaz'](http://www.chiark.greenend.org.uk/~sgtatham/bugs.html) para que você possa fazer bons relatos de bugs no futuro./nresult: {'corrected_comment': '@abrice Esse tipo de passivo-agressivo é desrespeitoso com o mantenedor. Eu apreciaria se você pudesse manter os relatos de bugs mais informativos e menos agressivos para termos um ambiente mais saudável'}/ncomment: Sim, instruções preparadas estão na minha lista de afazeres. Eu mesmo não preciso delas, então infelizmente elas acabam ficando no final da lista, a menos que alguém queira patrocinar parte do meu tempo para trabalhar nesse recurso. Dito isso, a abordagem baseada em SQL parece interessante como solução temporária de curto prazo./nresult: {'corrected_comment': 'Reconheço que instruções preparadas são uma melhoria importante que precisa ser abordada. Atualmente, elas estão na minha lista de afazeres, embora ainda não tenham sido priorizadas por não serem necessárias no meu trabalho imediato. No entanto, se houver interesse ou apoio da comunidade, estou aberto a discutir oportunidades de patrocínio para dedicar mais tempo a esse recurso. Enquanto isso, concordo que explorar abordagens baseadas em SQL pode servir como uma solução útil a curto prazo. Vamos continuar colaborando para encontrar a melhor abordagem que atenda às nossas necessidades imediatas sem perder de vista as melhorias de longo prazo.'}/ncomment: Como o repositório https://github.com/sidorares/nodejs-mysql-native lida com isso? Alguma razão para não simplesmente aproveitar partes da abordagem usada por lá? Ainda estou um pouco confuso com a quantidade de diferentes drivers MySQL para Node.JS. Acho que o Node torna divertido demais escrever código de protocolo de rede. :P Talvez em um ano a comunidade tenha se unido em torno de uma ou duas bibliotecas realmente sólidas./nresult: {'corrected_comment': 'Obrigado por levantar essa questão! Agradeço sua sugestão de explorar como o repositório https://github.com/sidorares/nodejs-mysql-native lida com problemas semelhantes. Com certeza vou analisar mais de perto para ver se há ideias ou abordagens valiosas que possamos incorporar ao nosso projeto. Quanto à abundância de drivers MySQL para Node.js, compartilho seu sentimento. Pode ser realmente desafiador navegar entre as diversas opções disponíveis. É quase como se o Node.js tornasse tentador demais escrever código de protocolo de rede! 😄 Com sorte, à medida que a comunidade evolui, veremos uma convergência em torno de uma ou duas bibliotecas de destaque que ofereçam soluções robustas.'}/ncomment: @gabordemooij /nVocê deveria ser morto. Dizer que um bom software não deveria ter nenhuma dependência além de um sistema operacional é realmente uma ideia estranha... Os desenvolvedores não deveriam reinventar a roda e, portanto, qualquer bom software deveria ser capaz de reutilizar bibliotecas externas quando necessário. Aliás: Um sistema operacional nada mais é do que um monte de bibliotecas e executáveis que foram compilados para formar um sistema totalmente utilizável. Um sistema operacional não deveria ter dependências externas?/nresult: {'corrected_comment': '@gabordemooij, com todo respeito, é importante considerar que o desenvolvimento de software moderno frequentemente depende do uso de bibliotecas e dependências externas para melhorar a funcionalidade e a eficiência. A ideia de que um bom software não deve ter nenhuma dependência além do sistema operacional está um pouco ultrapassada. Afinal, até os próprios sistemas operacionais são compostos por várias bibliotecas e executáveis. Trata-se de encontrar um equilíbrio entre reinventar a roda e aproveitar ferramentas existentes para criar softwares robustos e eficientes.'} /n/nsua resposta deve estar neste formato json e conter APENAS as três recomendações, seguindo o padrão abaixo: {\"suggestions\": [{\"corrected_comment\": \"comentário corrigido\"},{\"corrected_comment\": \"comentário corrigido\"},{\"corrected_comment\": \"comentário corrigido\"}]}. Certifique-se de que essas recomendações sejam distintas entre si e não inclua nenhum conteúdo ou explicação adicional."
}
