import { z } from 'zod';

export const userSchema = z.object({
  login: z.string(),
  id: z.number(),
  node_id: z.string(),
  avatar_url: z.string(),
  gravatar_id: z.string(),
  url: z.string(),
  html_url: z.string(),
  followers_url: z.string(),
  following_url: z.string(),
  gists_url: z.string(),
  starred_url: z.string(),
  subscriptions_url: z.string(),
  organizations_url: z.string(),
  threshold: z.number(),
  repos_url: z.string(),
  events_url: z.string(),
  received_events_url: z.string(),
  type: z.string(),
  user_view_type: z.string(),
  site_admin: z.boolean(),
});

export const subIssuesSummarySchema = z.object({
  total: z.number(),
  completed: z.number(),
  percent_completed: z.number(),
});

export const reactionsSchema = z.object({
  url: z.string(),
  total_count: z.number(),
  '+1': z.number(),
  '-1': z.number(),
  laugh: z.number(),
  hooray: z.number(),
  confused: z.number(),
  heart: z.number(),
  rocket: z.number(),
  eyes: z.number(),
});

export const ownerSchema = z.object({
  login: z.string(),
  id: z.number(),
  node_id: z.string(),
  avatar_url: z.string(),
  gravatar_id: z.string(),
  url: z.string(),
  html_url: z.string(),
  followers_url: z.string(),
  following_url: z.string(),
  gists_url: z.string(),
  starred_url: z.string(),
  subscriptions_url: z.string(),
  organizations_url: z.string(),
  repos_url: z.string(),
  events_url: z.string(),
  received_events_url: z.string(),
  type: z.string(),
  user_view_type: z.string(),
  site_admin: z.boolean(),
});

export const permissionsSchema = z.object({
  emails: z.string(),
  issues: z.string(),
  metadata: z.string(),
  pull_requests: z.string(),
});

export const senderSchema = z.object({
  login: z.string(),
  id: z.number(),
  node_id: z.string(),
  avatar_url: z.string(),
  gravatar_id: z.string(),
  url: z.string(),
  html_url: z.string(),
  followers_url: z.string(),
  following_url: z.string(),
  gists_url: z.string(),
  starred_url: z.string(),
  subscriptions_url: z.string(),
  organizations_url: z.string(),
  repos_url: z.string(),
  events_url: z.string(),
  received_events_url: z.string(),
  type: z.string(),
  user_view_type: z.string(),
  site_admin: z.boolean(),
});

export const installationSchema = z.object({
  id: z.number(),
  node_id: z.string(),
});

export const pullRequestSchema = z.object({
  url: z.string().url(),
  html_url: z.string().url(),
  diff_url: z.string().url(),
  patch_url: z.string().url(),
  merged_at: z.date().optional(),
});

export const issueSchema = z.object({
  url: z.string(),
  repository_url: z.string(),
  labels_url: z.string(),
  comments_url: z.string(),
  events_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  node_id: z.string(),
  number: z.number(),
  title: z.string(),
  user: userSchema,
  labels: z.array(z.any()),
  state: z.string(),
  locked: z.boolean(),
  assignee: z.any(),
  assignees: z.array(z.any()),
  milestone: z.any(),
  comments: z.number(),
  created_at: z.string(),
  updated_at: z.string(),
  closed_at: z.any(),
  author_association: z.string(),
  sub_issues_summary: subIssuesSummarySchema,
  active_lock_reason: z.any(),
  draft: z.boolean().optional(),
  pull_request: pullRequestSchema.optional(),
  body: z.any(),
  reactions: reactionsSchema,
  timeline_url: z.string(),
  performed_via_github_app: z.any(),
  state_reason: z.any(),
});

export const performedViaGithubAppSchema = z.object({
  id: z.number(),
  client_id: z.string(),
  slug: z.string(),
  node_id: z.string(),
  owner: ownerSchema,
  name: z.string(),
  description: z.string(),
  external_url: z.string(),
  html_url: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  permissions: permissionsSchema,
  events: z.array(z.string()),
});

export const repositorySchema = z.object({
  id: z.number(),
  node_id: z.string(),
  name: z.string(),
  full_name: z.string(),
  private: z.boolean(),
  owner: ownerSchema,
  html_url: z.string(),
  description: z.any(),
  fork: z.boolean(),
  url: z.string(),
  forks_url: z.string(),
  keys_url: z.string(),
  collaborators_url: z.string(),
  teams_url: z.string(),
  hooks_url: z.string(),
  issue_events_url: z.string(),
  events_url: z.string(),
  assignees_url: z.string(),
  branches_url: z.string(),
  tags_url: z.string(),
  blobs_url: z.string(),
  git_tags_url: z.string(),
  git_refs_url: z.string(),
  trees_url: z.string(),
  statuses_url: z.string(),
  languages_url: z.string(),
  stargazers_url: z.string(),
  contributors_url: z.string(),
  subscribers_url: z.string(),
  subscription_url: z.string(),
  commits_url: z.string(),
  git_commits_url: z.string(),
  comments_url: z.string(),
  issue_comment_url: z.string(),
  contents_url: z.string(),
  compare_url: z.string(),
  merges_url: z.string(),
  archive_url: z.string(),
  downloads_url: z.string(),
  issues_url: z.string(),
  pulls_url: z.string(),
  milestones_url: z.string(),
  notifications_url: z.string(),
  labels_url: z.string(),
  releases_url: z.string(),
  deployments_url: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  pushed_at: z.string(),
  git_url: z.string(),
  ssh_url: z.string(),
  clone_url: z.string(),
  svn_url: z.string(),
  homepage: z.any(),
  size: z.number(),
  stargazers_count: z.number(),
  watchers_count: z.number(),
  language: z.any(),
  has_issues: z.boolean(),
  has_projects: z.boolean(),
  has_downloads: z.boolean(),
  has_wiki: z.boolean(),
  has_pages: z.boolean(),
  has_discussions: z.boolean(),
  forks_count: z.number(),
  mirror_url: z.any(),
  archived: z.boolean(),
  disabled: z.boolean(),
  open_issues_count: z.number(),
  license: z.any(),
  allow_forking: z.boolean(),
  is_template: z.boolean(),
  web_commit_signoff_required: z.boolean(),
  topics: z.array(z.any()),
  visibility: z.string(),
  forks: z.number(),
  open_issues: z.number(),
  watchers: z.number(),
  default_branch: z.string(),
});

export const commentSchema = z.object({
  url: z.string(),
  html_url: z.string(),
  issue_url: z.string(),
  id: z.number(),
  node_id: z.string(),
  user: userSchema,
  created_at: z.string(),
  updated_at: z.string(),
  author_association: z.string(),
  body: z.string(),
  reactions: reactionsSchema,
  performed_via_github_app: performedViaGithubAppSchema,
});

export const payloadSchema = z.object({
  action: z.string(),
  issue: issueSchema,
  comment: commentSchema,
  repository: repositorySchema,
  sender: senderSchema,
  installation: installationSchema,
});

export const eventSchema = z.object({
  event: z.string(),
  payload: payloadSchema,
});

export type ProbotEvent = z.infer<typeof eventSchema>;
export type Payload = z.infer<typeof payloadSchema>;
export type Issue = z.infer<typeof issueSchema>;
export type User = z.infer<typeof userSchema>;
export type SubIssuesSummary = z.infer<typeof subIssuesSummarySchema>;
export type Reactions = z.infer<typeof reactionsSchema>;
export type Owner = z.infer<typeof ownerSchema>;
export type Permissions = z.infer<typeof permissionsSchema>;
